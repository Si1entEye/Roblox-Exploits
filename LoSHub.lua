-- // Variables \\ --

local level
local maxLevel
local rebirths
local curCity
local areaTeleport
local areaNameValue

local h_playerPos
local h_toggle

local a_playerPos
local a_toggle

local r_toggle

-- // Functions \\ --

function autoFarm()
    
    -- Rebound player
    function rebound()
        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)
        game:GetService("Players").LocalPlayer.Character:MoveTo(a_playerPos)
    end
    
    while true do
        if (not a_toggle) then
            coroutine.yield()
        else
            
            -- Update values
            rebirths = game:GetService("Players").LocalPlayer.leaderstats:FindFirstChild("Rebirths").Value
            level = game:GetService("Players").LocalPlayer:FindFirstChild("level").Value
            
            -- Load in areas
            if (level >= 275 and rebirths >= 10) then
                curCity = "Magma City"
                areaNameValue = game:GetService("Players").LocalPlayer.Character:FindFirstChild("areaNameValue")
                if ((areaNameValue and areaNameValue.Value ~= curCity) or not areaNameValue) then
                    a_playerPos = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
                    for i,v in pairs(game:GetService("Workspace").areaCircles:GetChildren()) do
                        if (v.areaName.Value == curCity) then
                            areaTeleport = v
                            break
                        end
                    end
                    local args = {
                        [1] = "travelToArea",
                        [2] = areaTeleport
                    }
                    game:GetService("ReplicatedStorage").rEvents.areaTravelRemote:InvokeServer(unpack(args))
                    rebound()
                end
            elseif (level >= 50 and rebirths >= 1) then
                curCity = "Magma City"
                areaNameValue = game:GetService("Players").LocalPlayer.Character:FindFirstChild("areaNameValue")
                if ((areaNameValue and areaNameValue.Value ~= curCity) or not areaNameValue) then
                    a_playerPos = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
                    for i,v in pairs(game:GetService("Workspace").areaCircles:GetChildren()) do
                        if (v.areaName.Value == curCity) then
                            areaTeleport = v
                            break
                        end
                    end
                    local args = {
                        [1] = "travelToArea",
                        [2] = areaTeleport
                    }
                    game:GetService("ReplicatedStorage").rEvents.areaTravelRemote:InvokeServer(unpack(args))
                    rebound()
                end
            elseif (level >= 25) then
                curCity = "Snow City"
                areaNameValue = game:GetService("Players").LocalPlayer.Character:FindFirstChild("areaNameValue")
                if ((areaNameValue and areaNameValue.Value ~= curCity) or not areaNameValue) then
                    a_playerPos = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
                    for i,v in pairs(game:GetService("Workspace").areaCircles:GetChildren()) do
                        if (v.areaName.Value == curCity) then
                            areaTeleport = v
                            break
                        end
                    end
                    local args = {
                        [1] = "travelToArea",
                        [2] = areaTeleport
                    }
                    game:GetService("ReplicatedStorage").rEvents.areaTravelRemote:InvokeServer(unpack(args))
                    rebound()
                end
            else
                curCity = "City"
            end
            
           -- Give steps
            local args = {
                [1] = "collectOrb",
                [2] = "Red Orb",
                [3] = curCity
            }
            game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(unpack(args)); 
            
            -- Give xp
            local args = {
                [1] = "collectOrb",
                [2] = "Yellow Orb",
                [3] = curCity
            }
            game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(unpack(args)); 
            
            -- Give gems
            local args = {
                [1] = "collectOrb",
                [2] = "Gem",
                [3] = curCity
            }
            game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(unpack(args)); 
            
            wait(0.0125)
        end
    end
end

function autoHoops()
 
    -- Rebound player
    function rebound()
        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)
        game:GetService("Players").LocalPlayer.Character:MoveTo(h_playerPos)
    end
    
    -- Teleport to available hoops
    while true do
        h_playerPos = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
        if (not h_toggle) then
            rebound()
            coroutine.yield()
        else
            
            for i,v in pairs(game:GetService("Workspace").Hoops:GetChildren()) do
                if (string.sub(v.hoopGui.rewardLabel.Text, 1, 1) == "+") then
                    game:GetService("Players").LocalPlayer.Character:MoveTo(v.Position)
                    wait(0.125)
                end
                rebound()
                if (not h_toggle) then
                    coroutine.yield()
                end
                wait(0.125)
            end
        end
    end
end

function autoRebirth()
    while true do
        
        -- Update values
        rebirths = game:GetService("Players").LocalPlayer.leaderstats:FindFirstChild("Rebirths").Value
        level = game:GetService("Players").LocalPlayer:FindFirstChild("level").Value
        maxLevel = 50 + (25*rebirths)
        
        if (not r_toggle) then
            rebound()
            coroutine.yield()
        else
            if (level == maxLevel) then
                local args = {
                [1] = "rebirthRequest"
                }
                game:GetService("ReplicatedStorage").rEvents.rebirthEvent:FireServer(unpack(args))
            end
        end
    end
end

-- // Start \\ --

local a_thread = coroutine.create(autoFarm)
local h_thread = coroutine.create(autoHoops)
local r_thread = coroutine.create(autoRebirth)

-- // Exploit GUI \\ --

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

local Window = Library.CreateLib("Si1ent - Legends of Speed Hub", "Sentinel")

local main = Window:NewTab("MAIN")
local s_player = main:NewSection("Player")
local s_races = main:NewSection("Races")

local autofarm = Window:NewTab("AUTOFARM")
local s_autofarm = autofarm:NewSection("Autofarms")
local s_rebirth = autofarm:NewSection("Rebirths")

s_player:NewSlider("Walk Speed", "Change player walk speed", 2000, 0, function(s)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
end)

s_player:NewSlider("Jump Power", "Change player jump power", 1000, 0, function(s)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = s
end)

s_player:NewSlider("Max Slope Angle", "Change player max slope angle", 90, 0, function(s)
    game.Players.LocalPlayer.Character.Humanoid.MaxSlopeAngle = s
end)

s_races:NewButton("Join Race", "Teleport to active race", function()
    local args = {
        [1] = "joinRace"
    }
    game:GetService("ReplicatedStorage").rEvents.raceEvent:FireServer(unpack(args))
end)

s_autofarm:NewToggle("Orb Farm", "Quickly farm Steps, XP, and Gems", function(state)
    if state then
        a_toggle = true
        coroutine.resume(a_thread)
    else
        a_toggle = false
    end
end)

s_autofarm:NewToggle("Hoop Farm", "Faster method of farming Steps and XP", function(state)
    if state then
        h_toggle = true
        h_playerPos = game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position
        coroutine.resume(h_thread)
    else
        h_toggle = false
    end
end)

s_rebirth:NewToggle("Auto Rebirth", "Automatically rebirth at max level", function(state)
    if state then
        r_toggle = true
        coroutine.resume(r_thread)
    else
        r_toggle = false
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if (input.KeyCode == Enum.KeyCode.Z) then
        Library:ToggleUI()
    end
end)
